---

stages:
  - build
  - scan
variables:
  REPO_IMAGE: registry.home-lan.co.uk/aun-filestore:latest
  
services:
  - name: docker:dind

container_build:
   image: docker:dind
   stage: build
   
   script:
     - export
     - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PW registry.home-lan.co.uk
     - docker build -t $REPO_IMAGE .
     - docker push  $REPO_IMAGE

container_scanning:
  image: docker:stable
  stage: scan
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PW registry.home-lan.co.uk
    - docker pull $REPO_IMAGE
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml $REPO_IMAGE || true
  artifacts:
    paths:
      - gl-container-scanning-report.json
